The language is just a fold over an [|[|env state|] term|].

|* composition   *|  f g h

|* mapping       *|     f
|* mapping       *|  { #x ( f g )  }
|* mapping       *|  {  f ( f g )  }
|* mapping       *|  [  f   _ g    ]
|* mapping       *|  [  f          ] 
|* mapping       *|  [  f   _ g .. ]
                     -- only the last one should map lists of variable length
                     
|* mapping each  *|  [ ..f ]
|* mapping each  *|  { ..=[kf vf] }

|* typecheck     *|  ?int
|* typecheck     *|  ?[ int ]
|* typecheck     *|  ?{ symbol int }
|* typecheck     *|  ?={ #aa int #bb int }
|* typecheck     *|  ?=[ int int int int ]
|* typecheck     *|  ?dir

|* quoting       *|  #x
|* quoting       *|  #[ x ]
|* quoting       *|  #=[ x ]

|* restructuring *|  %{   [ x .. ] x
                      }
|* restructuring *|  %{ .=[ #left   x   ] x
                        .=[ #right  _ n ] n
                        .=[ #middle     ] 0
                      }
|* restructuring *|  %{ ={ #a 0 ..   } =[ 0 0 ]
                        ={ #a 1 #b _ } =[ 0 0 ]
                        ={ #a x #b y } =[ x y ]
                      }
|* restructuring *|  %{ "hello `name`" "goodbye `name`"
                        _              "goodbye world"
                      }

|* conditionals  *|  ~{ "plus"        + 
                        "times"       *
                        /id(entity)?/ ()
                        _             ()
                      }
|* conditionals  *|  ~{     <=-10 #true
                        <>-10..10 #maybe
                             >=10 #false
                      }
|* conditionals  *|  ~{ [     ] .=[ #just 1  ]
                        [ _   ] .=[ #just 2  ]
                        [ _ _ ] .=[ #just 3  ]
                          _     .=[ #nothing ]
                      }

|* define        *|  ![ #x 34 ]
|* define        *|  ![ :t =[ [x] =:{ #left [x] #middle [] #right [x :int] } ] ]

|* define        *|  !#[ x 34 ]
|* define        *|  !:[ t    [x] =:{ #left [x] #middle [] #right [x :int] }   ]

NUMBERS                  
int           -1
float         -2.0
rational      -3/1
complex       -4+0i
complex       -4-0i
currency      -$5.00
currency      -Â¥5.00
infinity      ._inf
infinity      .+inf
infinity      .+inf
infinity      .+inf.0
infinity      .+inf/1
infinity      .+inf+0i
infinity      .+0+infi
infinity      .$+inf
infinity      .0xinf
infinity      .inf|16
infinity      .inf|08
infinity      .inf|02
undefined     .undef
undefined     .undef.0
undefined     .undef/1
hexadecimal   -0xc0ffee
hexadecimal   -c0ffee|16
octal         -c0ffee|08
binary        -001101|02

RANGES
range int     <>-1..-0
range int     <>-1......-0
range float   <>-1.0..-0.0
range int     <=-1
range int     >=-1
range int      <-1
range int      >-1
range char    <>'a'..'f'
range time    <>0000h..1200h
range date    >=04jul1776

TEXT
string        "hello dave"
string        "hello `name`"
string        "hello \`dave\`"
char          'F'
regex         /ab.?d/
location uri  @https://google.com?q=search
location uri  @https://google.com?q=`what`
location path @/home/taylor/.ssh
location path @/home/`user`/.ssh
location path @~/.ssh

TIME/DATES
time         0420h
time         0420h|PST
date         4:20PM
date         4:20PM|+08
date         00:00:01
date         25nov2012
datetime     25nov2012@0420h
datetime     25nov2012@04:20AM|PMT

SYMBOLS/TAGS
symbol      #hello
symbol      #[1 2 3]

BOOLS
bool        .=[ #true ]
bool        .true
bool        .false

TYPES
type        :int
type        :float
type        :rational
type        =:[ #currency :int     ]
type        =:[ #complex  :float   ]
type        =:[ #range    :time    ]
type        :bool
type        :string
type        :char
type        :regex
type        :uri
type        :path
type        :time
type        :date
type        :datetime
type        :symbol
type        :[          :int ]
type        :{  :symbol :int }
type        :-[         :int ]
type        :-{ :symbol :int }
type        :=[ :symbol :int ]
type        :={ #a      :int }
type        :%{ :symbol :int }
type        =:{ #a [] #b [] }

TYPELETS
typelet     .true
typelet     .=[ #range .=[ #time .gmt ] ]

STRUCTURES
lst int      [    0 ]
lst int     -[    0 ]
tpl int     =[    0 ]
dct int      { #a 0 }
dct int     -{ #a 0 }
rec int     ={ #a 0 }

FUNCTIONS
type        :%{  x x }
fun  x   x    (      )
fun  x   x   %{  x x }
fun sym sym  ~{ #x x }

MAYBES
maybe int   .=[ #just 0 ]
maybe int   .nothing

RESULTS
res str int .=[ #ok   0       ]
res str int .=[ #err "whoops" ]


NO APPLICATION.
Seriously, if you want to add two numbers, throw them in a tuple and map over them.

    %[ x ={ #left x } ]
    -- this creates a record
    -- in Elm, this would be (\x -> { left = x })

    %[ x =[ #left x ] ]
    -- this creates a tuple
    -- in Elm, this would be (\x -> ( Left, x ))

    %[ x =:[ #right x 2 ] ]
    -- this creates a union typelet
    -- in Elm, this would be (Right x 2)

    %[ _ .middle ]
    -- this also creates a union typelet
    -- in Elm, this would be (Middle)

    %[ _ =:[ #middle ] ]
    -- this also creates a union typelet
    -- in Elm, this would be (Middle)

    ![ :dir =[ [x] =:{ #left [x] #middle [] #right [x :int] } ] ]
    -- this creates a union type
    -- in Elm, this would be (type Dir x = Left x | Middle | Right x Int)

    -------------------

    copy =[ _ f ]

    -- make a copy and apply f to the copy

    -------------------

    =[ _ =[ + 0 [1 2 3] ] ]
    foldl
    ?int

    -------------------

    ?[ int ]
    %{ [ x y .. ] =[ x y ]
     }
     +
    %{ x =[ x 4 ]
     }
    ?[ int ]
    -- This is a comment
    -- Another comment
    -- Comment testing one two three
     *
    %{ x [ x x x ]
     }
    ?[ int ]
    ![ #sum ( %{ ints =[ + 0 ints ] } foldl ) ]
    sum
    ?int

    -------------------

    !#[ fib
        ( ?int
          !#[ first  %{ =[ n _ ] n } ]
          !#[ second %{ =[ _ n ] n } ]
          %{ n =[ 0 n ] } range
          !#[ f (second dup =[ second + ] ) ]
          %{ ns =[ f =[0 1] ns ] } foldl first
        )
      ]

    !#[ fib
        ( %{ n =[ (dup =[ tuple-second + ]) =[0 1] n ] }
          ntimes
          tuple-first
        )
      ]

    -------------------

    %{ _ #[ ( 1 + 2 ) * 3 / 4 ] }
    ?[ symbol ]
    calculate
    ?real

    -------------------

    %{ _ #[ abc def ghi ] }
    ?[ symbol ]
     [ ..symbol->string ]
     concat
    ?string
    -- Should be "abcde"

    -------------------

    %{ _ :x }
    ?symbol

    -------------------

    -- += [| myUnion
    --       [   :a
    --         { :b int }
    --           :c
    --       ]
    --    |]
    -- -- everything might work better if we have a "type" character
    -- -- : is "symbol", so __ could be "type"
    -- -- we can just match on all the options in the list


TODO: Cases for mapping and restructuring.

BUG: I don't like a lot of this.

TODO: The meta-functions are all macros, which are functions that operate on the env, state, and term.
TODO:  Normal functions are just lists or whatever.
TODO:    Actually, every term is a function that operates on env/state. Because `(f define g (+ +) h)` must itself be a function.

TODO: For v1, don't worry about syntax/symbols. Just use words.


define g ( + dup == )
typecheck boolean
f g h
f
g
h
fold [] f
[ h ]
restructure [ x ] x




-----------------------------------------

?server-in
%{ =:[ .requested
       ={ #id     id
          #path   /echo
          #method :#POST
          #body   body
        }
     ]
   [ =:[ #respond
         ={ #id     id
            #status 200
            #body   body
          }
       ]
   ]

   =:[ .requested
       ={ #id     id
          #path   /user
          #method :#GET
        }
     ]
   [ =:[ .fetch
        ={ #name   #user
           #uri    @https://localhost:5432
           #method :#POST
           #body   "SELECT * FROM USERS ORDER BY RANDOM LIMIT 1"
           -- TODO: callback-ish thing or request data
         }
      ]
   ]

   =:[ .fetched
       =[ #user
          =:[ .response
              ={ #id id
               }
            ]
          =:[ .error
              error
            ]
        ]
     ]
   [ =:[ .respond
         ={ #id     id
            #status 500
            #body   error
          }
       ]

   ]

   =:[ .fetched
       =[ #user
          =:[ .response
              ={ #id id
               }
            ]
          =:[ .ok
              user
            ]
        ]
     ]
   [ =:[ .respond
         ={ #id     id
            #status 200
            #body   user
          }
       ]

   ]
 }
?server-out
        
-- echo server


-----------------------------------------

[ f ]

-- Each term takes a :compilation-state (:==[ env state ]) and produces a :compilation-state
--   Because each operator is a compilation-time macro, it should be easy to define new operators, and even change the language quite drastically.


-----------------------------------------

-- -- BUG: This section is wrong! We don't want to pass terms through terms.
-- 
-- [ f
-- 
-- -- This should technicially be a valid program!
-- --   It takes :==[ env state ] and produces :==[ env state ].
-- 
-- -- The first function ("[" in this case) gets the lastState wrapped in a reading struct, e.g. =[ #reading "]" lastState ].
-- --   It is responsible for parsing words as they come in, and setting up the state for the next function in line.
-- 
-- macro
-- =[ "["
--     ( |> { =[ env =[ #error error ] ]
--            =[ env =[ #error error ] ]
-- 
--            =[ env =[ #reading "]" =[ #closing state ] ] ]
--            =[ env state ]
-- 
--            =[ env =[ #reading "]" _ ] ]
--            =[ env =[ #error `Parse error: ]` ] ]
-- 
--            =[ env =[ #reading ")" _ ] ]
--            =[ env =[ #error `Parse error: )` ] ]
-- 
--            =[ env =[ #reading "}" _ ] ]
--            =[ env =[ #error `Parse error: }` ] ]
-- 
--            =[ env =[ #reading str =[ #composing fs ] ] ]
--            -- TODO
--          }
--     )
--  ]
--  -- TODO: If there's no "["-specific stuff to do, pass the state into a generic function that looks for unexpected tokens, etc.
--       
-- macro
-- =[ "]"
--     ( |> { =[ env =[ #error error ] ]
--            =[ env =[ #error error ] ]
-- 
--            =[ env =[ #reading _ _ ] ]
--            =[ env =[ #error `Unexpected token: ]` ] ]
-- 
--            =[ env =[ #composing fs ] ]
--            =[ env 
--          }
--     )
--  ]
--  -- TODO: If there's no "["-specific stuff to do, pass the state into a generic function that looks for unexpected tokens, etc.
-- 
-- 
