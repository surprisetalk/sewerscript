
f g h            --composition
{ x:f y }        --mapping
{ x y }->[ x y ] --restructuring
0.(f g h)        --folding


_->[1 2 3] 0.+
-- this function always returns 6

_->[1 2 3]
([|n l|]->[n ...l]).[]
[x y z]->[|x y z|]
[|_->100 _ _|]
-- this function always returns [|100 1 2|]


--------------------------


The language is just a fold over an [|[|env state|] term|].

|* composition   *|  f g h
|* mapping       *|     f
|* mapping       *|     { : x ( f g ) }
|* mapping       *|     [ f _ g ]
|* mapping       *|  |- [ f ]
                     |- [ f _ g ... ]
                     | 
|* restructuring *|  |> [ x ... ] x
|* restructuring *|  |> [ x ... ] x
|* folding       *|  <> [] f
|* folding       *|  <> 0  f

|* folding       *|  |* [] f
|* folding       *|  |* 0  f


NO APPLICATION.
Seriously, if you want to add two numbers, throw them in a tuple and map over them.

    |= [ int ]
    |> { [ x y ... ] [| x y |]
       }
    |- +
    |> { x [| x 4 |]
       }
    |= [| int |]
    -- This is a comment
    -- Another comment
    -- Comment testing one two three
    |- *
    |> { x [ x x x ]
       }
    |= [ int ]
    :* [| 0 + |]
    |= int


    |> { _ :[ ( 1 + 2 ) * 3 / 4 ]
       }
    |= [ symbol ]
    |- calculate
    |= real

    |> { _ :[ abc def ghi ]
       }
    |= [ symbol ]
    :* [| [] ( [| symbol->string _ |] append ) |]
    |= string
    -- Should be "abcde"

    |> { _ :[ abc def ghi ]
       }
    |= [ symbol ]
    :- ( [| symbol->string _ |] append )
    -- map over a list?
    |= string
    -- Should be "abcde"

    |> { _ :x }
    |= Symbol


TODO: Cases for mapping and restructuring.

BUG: I don't like a lot of this.

TODO: The meta-functions are all macros, which are functions that operate on the env, state, and term.
TODO:  Normal functions are just lists or whatever.
TODO:    Actually, every term is a function that operates on env/state. Because `(f define g (+ +) h)` must itself be a function.

TODO: For v1, don't worry about syntax/symbols. Just use words.


define g ( + dup == )
typecheck boolean
f g h
f
g
h
fold [] f
[ h ]
restructure [ x ] x




-----------------------------------------

|> {  {| :request
         {| :id     id
            :path   "/echo"
            :method "POST"
            :body   body
         |}
      |}

      {| :response
         {| :id     id
            :body   body
         |}
      |}
   }
        
-- echo server
