
-- sewer --storage=. --socket=*:80 webserver.sewer

-- WebServer.Response Storage Network 
-- WebServer.Request  Storage Network
--   we need subtypes to "range" over what we have access to
--     this gives us a lot more safety in terms of readable/writable sewage

-- serve : a -> (WebServer.Response s n -> a -> a) -> (a -> WebServer.Response.Request -> Async (WebServer.Response s n) (List WebServer.Request) WebServer.Request.Response) -> WebServer.Response -> List WebServer.Request

-- consider ditching the special syntaxes in favor a unified Fold or Applicative set of operators

-- i love these request and response types!
--   exampleWebServer : Request () /* @ws://*:(80|3306) a -> [ Response () /* @ws://*:(80|3306) a ]
--   when we go deeper : Request i _/ @*:3306 (Rows a) -> Response i _/ @*:3306 (Query a)

#. Request addr path socket packet
 | Write addr  path   String
 | Send  addr  socket packet
 | Say   addr (Result String String)

#. Response addr path socket packet
 | Read    addr path   (Result    FileError String)
 | Receive addr socket (Result NetworkError packet)
 | Hear    addr        (Result       String String)

=. WebServer.Response @*/index.html @*:(80|3306)
 * WebServer.serve File.Error.NotFound
   -. WebServer.Response @*/index.html @*/index.html -> File -> File
    | File Subscribed (_ / @index.html) file -> _ -> file
    | _ -> file -> file
   -| index -> Request (_ / @index.html) { body = body } ->
      @: body
       * authenticate
       * transformRequest
       | MySql.query creds "SELECT (2 + 2)"
       * fillTemplate index
    : @: error404
 . List (WebServer.Request Path.none @*:(80|3306))




